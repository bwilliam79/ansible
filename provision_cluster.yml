---
- hosts: localhost

  vars:
    do_token: "{{ lookup('env','DO_API_KEY') }}"
    swarm_managers:
      - swarm-manager-1
      - swarm-manager-2
      - swarm-manager-3
    swarm_workers:
      - swarm-worker-1
      - swarm-worker-2
      - swarm-worker-3

  tags: get_inventory

  gather_facts: false

  tasks:

  - name: Ensure key exists at DigitalOcean
    digital_ocean:
      state: present
      command: ssh
      name: ansible
      ssh_pub_key: "{{ lookup('file', '~/.ssh/id_rsa.pub') }}"
      api_token: "{{ do_token }}"
    register: ansible

  - name: Provision swarm managers
    digital_ocean:
      state: present
      command: droplet
      name: "{{ item }}"
      unique_name: yes
      size_id: 512mb
      private_networking: yes
      region_id: sfo2
      image_id: centos-7-2-x64
      ssh_key_ids: "{{ ansible.ssh_key.id }}"
      api_token: "{{ do_token }}"
    with_items: "{{ swarm_managers }}"
    register: droplet_details

  - name: Add swarm managers to the inventory
    add_host:
      name: "{{ item.droplet.name }}"
      hostname: "{{ item.droplet.name }}"
      ansible_host: "{{ item.droplet.ip_address }}"
      ansible_user: root
      groups: swarm_managers
    with_items: "{{ droplet_details.results }}"

  - name: Provision swarm workers
    digital_ocean:
      state: present
      command: droplet
      name: "{{ item }}"
      unique_name: yes
      size_id: 512mb
      private_networking: yes
      region_id: sfo2
      image_id: centos-7-2-x64
      ssh_key_ids: "{{ ansible.ssh_key.id }}"
      api_token: "{{ do_token }}"
    with_items: "{{ swarm_workers }}"
    register: droplet_details

  - name: Add swarm workers to the inventory
    add_host:
      name: "{{ item.droplet.name }}"
      hostname: "{{ item.droplet.name }}"
      ansible_host: "{{ item.droplet.ip_address }}"
      ansible_user: root
      groups: swarm_workers
    with_items: "{{ droplet_details.results }}"

- hosts: swarm_managers, swarm_workers

  gather_facts: false

  tasks:

  - name: Confirm nodes are online
    become: false
    wait_for: host={{ ansible_ssh_host }} state=started port=22 delay=30 timeout=300 connect_timeout=20

- hosts: swarm_managers, swarm_workers

  tasks:

  - name: upgrade all packages
    yum:
      name: '*'
      state: latest
    register: reboot

  - include: install_docker_engine.yml

  - name: Reboot nodes for udpates to be applied
    shell: sleep 2 && shutdown -r now
    async: 1
    poll: 0
    ignore_errors: true
    when: reboot.changed

  - name: Wait for nodes to reboot
    become: false
    local_action: wait_for host={{ ansible_ssh_host }} state=started port=22 delay=30 timeout=300 connect_timeout=15
    when: reboot.changed

- include:  configure_swarm.yml

- hosts: localhost

  tasks:

  - include: add_hosts_and_inventory_entries.yml

- hosts: swarm_managers[0]

  tasks:

    - include: deploy_portainer_service.yml

- hosts: swarm_managers, swarm_workers

  tags: get_inventory

  gather_facts: false

  tasks:

  - debug:
      var: ansible_default_ipv4.address
